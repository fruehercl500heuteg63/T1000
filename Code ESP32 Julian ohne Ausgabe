#include <mcp_can.h>
#include <SPI.h>
#include "esp_task_wdt.h"

long unsigned int rxId;
unsigned char len = 0;
unsigned char rxBuf[8];
char msgString[128];  // Array zur Speicherung des seriellen Strings

#define CAN0_INT 2  // Setze INT auf Pin 2
MCP_CAN CAN0(5);   // Setze CS auf Pin 10

void setup() {
  Serial.begin(115200);
  // Watchdog Timer initialisieren (3 Sekunden Timeout)
  esp_task_wdt_config_t wdt_config = {
    .timeout_ms = 3000,
    .trigger_panic = true
  };
  esp_task_wdt_init(&wdt_config);
  esp_task_wdt_add(NULL);  // Füge den aktuellen Task zum Watchdog Timer hinzu

  Serial.println("Starte Initialisierung...");

  // Initialisiere MCP2515 mit 16MHz Taktfrequenz und 250kb/s Baudrate, ohne Masken und Filter.
  Serial.println("Initialisiere MCP2515...");
  if (CAN0.begin(MCP_ANY, CAN_250KBPS, MCP_16MHZ) == CAN_OK) {
    Serial.println("MCP2515 erfolgreich initialisiert!");
  } else {
    Serial.println("Fehler bei der Initialisierung des MCP2515...");
    while (1) {
      esp_task_wdt_reset();  // Watchdog Timer zurücksetzen
    }  // Halte den Code an, wenn die Initialisierung fehlschlägt
  }

  CAN0.setMode(MCP_NORMAL);  // Setze den Betriebsmodus auf normal, damit der MCP2515 ACKs auf empfangene Daten sendet.

  pinMode(CAN0_INT, INPUT);  // Konfiguriere Pin für /INT-Eingang

  Serial.println("Setup abgeschlossen. MCP2515 Library Receive Example...");
}

void loop() {
  Serial.println("Loop läuft...");
  esp_task_wdt_reset();  // Watchdog Timer zurücksetzen

  if (!digitalRead(CAN0_INT)) {  // Wenn der CAN0_INT-Pin niedrig ist, empfange den Puffer
    Serial.println("Nachricht empfangen...");
    CAN0.readMsgBuf(&rxId, &len, rxBuf);  // Daten lesen: len = Datenlänge, buf = Datenbyte(s)

    if ((rxId & 0x80000000) == 0x80000000)  // Bestimmen, ob ID standard (11 Bit) oder erweitert (29 Bit) ist
      sprintf(msgString, "Erweiterte ID: 0x%.8lX  DLC: %1d  Daten:", (rxId & 0x1FFFFFFF), len);
    else
      sprintf(msgString, "Standard ID: 0x%.3lX       DLC: %1d  Daten:", rxId, len);

    Serial.print(msgString);

    if ((rxId & 0x40000000) == 0x40000000) {  // Bestimmen, ob die Nachricht ein Remote Request Frame ist.
      sprintf(msgString, " REMOTE REQUEST FRAME");
      Serial.print(msgString);
    } else {
      for (byte i = 0; i < len; i++) {
        sprintf(msgString, " 0x%.2X", rxBuf[i]);
        Serial.print(msgString);
      }
    }

    Serial.println();
  }
  delay(1000);  // Füge eine Verzögerung hinzu, um sicherzustellen, dass der Watchdog Timer nicht getriggert wird
}
