#include <SPI.h>

#define CAN_2515
// #define CAN_2518FD

// Set SPI CS Pin according to your hardware

#if defined(SEEED_WIO_TERMINAL) && defined(CAN_2518FD)
// For Wio Terminal w/ MCP2518FD RPi Hatï¼š
// Channel 0 SPI_CS Pin: BCM 8
// Channel 1 SPI_CS Pin: BCM 7
// Interupt Pin: BCM25
const int SPI_CS_PIN  = BCM8;
const int CAN_INT_PIN = BCM25;
#else

// For Arduino MCP2515 Hat:
// the cs pin of the version after v1.1 is default to D9
// v0.9b and v1.0 is default D10
const int SPI_CS_PIN = 9;
const int CAN_INT_PIN = 2;
#endif

#ifdef CAN_2518FD
#include "mcp2518fd_can.h"
mcp2518fd CAN(SPI_CS_PIN); // Set CS pin

#define MAX_DATA_SIZE 8
#endif

#ifdef CAN_2515
#include "mcp2515_can.h"
mcp2515_can CAN(SPI_CS_PIN); // Set CS pin
#define MAX_DATA_SIZE 8
#endif

void setup() {
SERIAL_PORT_MONITOR.begin(115200);
while (!SERIAL_PORT_MONITOR) {}

```
#if MAX_DATA_SIZE > 8
CAN.setMode(CAN_NORMAL_MODE);
#endif

while (CAN_OK != CAN.begin(CAN_250KBPS)) {
    SERIAL_PORT_MONITOR.println(F("CAN init fail, retry..."));
    delay(100);
}
SERIAL_PORT_MONITOR.println(F("CAN init ok!"));

```

}

uint32_t id;
uint8_t  type; // bit0: ext, bit1: rtr
uint8_t  len;
byte cdata[MAX_DATA_SIZE] = {0};

void loop() {
// Check if data is available
if (CAN_MSGAVAIL != CAN.checkReceive()) {
return;
}

```
// Read the data, len: data length, buf: data buffer
CAN.readMsgBuf(&len, cdata);

id = CAN.getCanId();

// Check the specific CAN ID
if (id == 0x349) {
    // Print the raw data bytes
    SERIAL_PORT_MONITOR.print("Data Field: ");
    for (int i = 0; i < len; i++) {
        SERIAL_PORT_MONITOR.print(cdata[i], HEX);
        SERIAL_PORT_MONITOR.print(" ");
    }
    SERIAL_PORT_MONITOR.println();
}

```

}
